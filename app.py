import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_curve, auc, classification_report
import warnings
warnings.filterwarnings('ignore')

from data_processor import DataProcessor
from model_trainer import ModelTrainer
from visualizations import Visualizations

def main():
    st.set_page_config(
        page_title="Sistema Predictivo Cardiovascular",
        page_icon="‚ù§Ô∏è",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("‚ù§Ô∏è Sistema Predictivo Cardiovascular")
    st.markdown("---")
    
    # Sidebar para navegaci√≥n
    st.sidebar.title("Navegaci√≥n")
    page = st.sidebar.selectbox(
        "Selecciona una p√°gina:",
        ["üìä Exploraci√≥n de Datos", "ü§ñ Entrenamiento de Modelos", "üîÆ Predicciones", "üìà Comparaci√≥n de Modelos"]
    )
    
    # Cargar datos
    @st.cache_data
    def load_data():
        try:
            # Intentar cargar el archivo desde la ubicaci√≥n esperada
            df = pd.read_csv('attached_assets/cardio_train.csv', sep=';')
            
            # Procesar el dataset
            processor = DataProcessor()
            df_processed = processor.process_data(df)
            return df_processed, processor
        except FileNotFoundError:
            st.error("‚ùå No se pudo encontrar el archivo 'cardio_train.csv'. Por favor, aseg√∫rate de que el archivo est√© en la carpeta 'attached_assets'.")
            return None, None
        except Exception as e:
            st.error(f"‚ùå Error al cargar los datos: {str(e)}")
            return None, None
    
    df, processor = load_data()
    
    if df is None:
        st.stop()
    
    # Mostrar informaci√≥n b√°sica del dataset
    st.sidebar.markdown("### üìã Informaci√≥n del Dataset")
    st.sidebar.info(f"**Registros:** {len(df):,}")
    st.sidebar.info(f"**Caracter√≠sticas:** {len(df.columns)-1}")
    st.sidebar.info(f"**Casos positivos:** {df['cardio'].sum():,} ({df['cardio'].mean()*100:.1f}%)")
    
    # Navegaci√≥n por p√°ginas
    if page == "üìä Exploraci√≥n de Datos":
        exploration_page(df, processor)
    elif page == "ü§ñ Entrenamiento de Modelos":
        training_page(df)
    elif page == "üîÆ Predicciones":
        prediction_page(df)
    elif page == "üìà Comparaci√≥n de Modelos":
        comparison_page(df)

def exploration_page(df, processor):
    st.header("üìä Exploraci√≥n de Datos Cardiovasculares")
    
    # Crear instancia de visualizaciones
    viz = Visualizations()
    
    # Estad√≠sticas descriptivas
    st.subheader("üìà Estad√≠sticas Descriptivas")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Variables Num√©ricas")
        numeric_stats = df.describe()
        st.dataframe(numeric_stats.round(2))
    
    with col2:
        st.markdown("#### Distribuci√≥n de la Variable Objetivo")
        cardio_counts = df['cardio'].value_counts()
        fig_pie = px.pie(
            values=cardio_counts.values,
            names=['Sin Enfermedad Cardiovascular', 'Con Enfermedad Cardiovascular'],
            title="Distribuci√≥n de Enfermedades Cardiovasculares",
            color_discrete_sequence=['#2E8B57', '#DC143C']
        )
        st.plotly_chart(fig_pie, use_container_width=True)
    
    st.markdown("---")
    
    # Visualizaciones interactivas
    st.subheader("üìä Visualizaciones Interactivas")
    
    # Selecci√≥n de tipo de gr√°fico
    chart_type = st.selectbox(
        "Selecciona el tipo de an√°lisis:",
        ["Distribuci√≥n por Edad", "An√°lisis de Presi√≥n Arterial", "Factores de Riesgo", "Correlaci√≥n de Variables", "Distribuci√≥n por G√©nero"]
    )
    
    if chart_type == "Distribuci√≥n por Edad":
        viz.plot_age_distribution(df, st)
    elif chart_type == "An√°lisis de Presi√≥n Arterial":
        viz.plot_blood_pressure_analysis(df, st)
    elif chart_type == "Factores de Riesgo":
        viz.plot_risk_factors(df, st)
    elif chart_type == "Correlaci√≥n de Variables":
        viz.plot_correlation_matrix(df, st)
    elif chart_type == "Distribuci√≥n por G√©nero":
        viz.plot_gender_analysis(df, st)
    
    # Datos originales
    st.markdown("---")
    st.subheader("üîç Vista del Dataset")
    
    if st.checkbox("Mostrar datos originales"):
        st.dataframe(df.head(100))
        
        # Opci√≥n de descarga
        csv = df.to_csv(index=False)
        st.download_button(
            label="üì• Descargar datos procesados (CSV)",
            data=csv,
            file_name="cardio_data_processed.csv",
            mime="text/csv"
        )

def training_page(df):
    st.header("ü§ñ Entrenamiento de Modelos de Machine Learning")
    
    # Preparar datos
    trainer = ModelTrainer()
    X, y = trainer.prepare_features(df)
    
    # Divisi√≥n de datos
    st.subheader("‚öôÔ∏è Configuraci√≥n del Entrenamiento")
    
    col1, col2 = st.columns(2)
    with col1:
        test_size = st.slider("Tama√±o del conjunto de prueba", 0.1, 0.4, 0.2, 0.05)
    with col2:
        random_state = st.number_input("Semilla aleatoria", 1, 100, 42)
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state, stratify=y)
    
    st.info(f"üìä Datos de entrenamiento: {len(X_train):,} | Datos de prueba: {len(X_test):,}")
    
    # Entrenar modelos
    if st.button("üöÄ Entrenar Todos los Modelos", type="primary"):
        with st.spinner("Entrenando modelos..."):
            results = trainer.train_all_models(X_train, X_test, y_train, y_test)
            
            # Guardar en session state
            st.session_state['models'] = results['models']
            st.session_state['metrics'] = results['metrics']
            st.session_state['X_test'] = X_test
            st.session_state['y_test'] = y_test
            st.session_state['feature_names'] = X.columns.tolist()
        
        st.success("‚úÖ ¬°Modelos entrenados exitosamente!")
    
    # Mostrar resultados si existen
    if 'models' in st.session_state:
        st.markdown("---")
        st.subheader("üìä Resultados del Entrenamiento")
        
        # Tabla de m√©tricas
        metrics_df = pd.DataFrame(st.session_state['metrics']).T
        metrics_df = metrics_df.round(4)
        metrics_df = metrics_df.sort_values('Accuracy', ascending=False)
        
        st.dataframe(metrics_df, use_container_width=True)
        
        # Modelo destacado
        best_model = metrics_df.index[0]
        best_accuracy = metrics_df.loc[best_model, 'Accuracy']
        
        st.success(f"üèÜ **Mejor modelo:** {best_model} con {best_accuracy:.1%} de precisi√≥n")
        
        # An√°lisis detallado del mejor modelo
        st.subheader(f"üîç An√°lisis Detallado: {best_model}")
        
        if best_model == 'Random Forest':
            # Feature importance para Random Forest
            model = st.session_state['models'][best_model]
            feature_importance = pd.DataFrame({
                'Feature': st.session_state['feature_names'],
                'Importance': model.feature_importances_
            }).sort_values('Importance', ascending=False)
            
            fig_importance = px.bar(
                feature_importance.head(10),
                x='Importance',
                y='Feature',
                orientation='h',
                title=f"Top 10 Caracter√≠sticas M√°s Importantes - {best_model}",
                color='Importance',
                color_continuous_scale='Viridis'
            )
            fig_importance.update_layout(yaxis={'categoryorder': 'total ascending'})
            st.plotly_chart(fig_importance, use_container_width=True)
        
        elif best_model == 'Decision Tree':
            # Informaci√≥n del √°rbol de decisi√≥n
            model = st.session_state['models'][best_model]
            st.write(f"**Profundidad del √°rbol:** {model.get_depth()}")
            st.write(f"**N√∫mero de hojas:** {model.get_n_leaves()}")
            
            # Feature importance para Decision Tree
            feature_importance = pd.DataFrame({
                'Feature': st.session_state['feature_names'],
                'Importance': model.feature_importances_
            }).sort_values('Importance', ascending=False)
            
            fig_importance = px.bar(
                feature_importance.head(10),
                x='Importance',
                y='Feature',
                orientation='h',
                title=f"Top 10 Caracter√≠sticas M√°s Importantes - {best_model}",
                color='Importance',
                color_continuous_scale='Plasma'
            )
            fig_importance.update_layout(yaxis={'categoryorder': 'total ascending'})
            st.plotly_chart(fig_importance, use_container_width=True)

def prediction_page(df):
    st.header("üîÆ Predicciones Individuales")
    
    if 'models' not in st.session_state:
        st.warning("‚ö†Ô∏è Primero debes entrenar los modelos en la p√°gina de 'Entrenamiento de Modelos'.")
        return
    
    st.subheader("üìù Ingresa los Datos del Paciente")
    
    # Formulario de entrada
    col1, col2, col3 = st.columns(3)
    
    with col1:
        age = st.slider("Edad (a√±os)", 18, 100, 50)
        gender = st.selectbox("G√©nero", ["Mujer", "Hombre"])
        height = st.slider("Altura (cm)", 120, 220, 170)
        weight = st.slider("Peso (kg)", 30, 200, 70)
    
    with col2:
        ap_hi = st.slider("Presi√≥n Sist√≥lica", 80, 250, 120)
        ap_lo = st.slider("Presi√≥n Diast√≥lica", 40, 150, 80)
        cholesterol = st.selectbox("Colesterol", ["Normal", "Sobre el normal", "Muy alto"])
        gluc = st.selectbox("Glucosa", ["Normal", "Sobre el normal", "Muy alto"])
    
    with col3:
        smoke = st.selectbox("¬øFuma?", ["No", "S√≠"])
        alco = st.selectbox("¬øConsume alcohol?", ["No", "S√≠"])
        active = st.selectbox("¬øHace actividad f√≠sica?", ["No", "S√≠"])
    
    # Convertir inputs a formato del modelo
    def convert_inputs():
        # Calcular edad en d√≠as (aproximadamente)
        age_days = age * 365
        
        # Calcular BMI
        bmi = weight / ((height/100) ** 2)
        
        # Convertir variables categ√≥ricas
        gender_num = 2 if gender == "Hombre" else 1
        chol_map = {"Normal": 1, "Sobre el normal": 2, "Muy alto": 3}
        gluc_map = {"Normal": 1, "Sobre el normal": 2, "Muy alto": 3}
        
        return np.array([[
            age_days, gender_num, height, weight, ap_hi, ap_lo,
            chol_map[cholesterol], gluc_map[gluc],
            1 if smoke == "S√≠" else 0,
            1 if alco == "S√≠" else 0,
            1 if active == "S√≠" else 0,
            bmi
        ]])
    
    # Realizar predicci√≥n
    if st.button("üî¨ Realizar Predicci√≥n", type="primary"):
        input_data = convert_inputs()
        
        st.markdown("---")
        st.subheader("üìä Resultados de la Predicci√≥n")
        
        # Predicciones de todos los modelos
        predictions = {}
        probabilities = {}
        
        for model_name, model in st.session_state['models'].items():
            pred = model.predict(input_data)[0]
            predictions[model_name] = pred
            
            if hasattr(model, 'predict_proba'):
                prob = model.predict_proba(input_data)[0][1]
                probabilities[model_name] = prob
            else:
                # Para SVM sin probabilidad
                decision = model.decision_function(input_data)[0]
                prob = 1 / (1 + np.exp(-decision))  # Aproximaci√≥n sigmoide
                probabilities[model_name] = prob
        
        # Mostrar resultados
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üéØ Predicciones por Modelo")
            for model_name, pred in predictions.items():
                risk_level = "üî¥ ALTO RIESGO" if pred == 1 else "üü¢ BAJO RIESGO"
                st.write(f"**{model_name}:** {risk_level}")
        
        with col2:
            st.markdown("#### üìä Probabilidades de Riesgo")
            prob_df = pd.DataFrame({
                'Modelo': list(probabilities.keys()),
                'Probabilidad': [f"{p:.1%}" for p in probabilities.values()],
                'Valor': list(probabilities.values())
            })
            
            fig_prob = px.bar(
                prob_df,
                x='Modelo',
                y='Valor',
                title="Probabilidad de Enfermedad Cardiovascular",
                color='Valor',
                color_continuous_scale='RdYlGn_r',
                text='Probabilidad'
            )
            fig_prob.update_traces(textposition='outside')
            fig_prob.update_layout(showlegend=False)
            st.plotly_chart(fig_prob, use_container_width=True)
        
        # Consenso de modelos
        avg_prob = np.mean(list(probabilities.values()))
        consensus_pred = 1 if avg_prob > 0.5 else 0
        
        st.markdown("---")
        st.subheader("üèÜ Consenso de Modelos")
        
        if consensus_pred == 1:
            st.error(f"‚ö†Ô∏è **RIESGO CARDIOVASCULAR ELEVADO** - Probabilidad promedio: {avg_prob:.1%}")
            st.markdown("**Recomendaciones:**")
            st.markdown("- üë®‚Äç‚öïÔ∏è Consultar con un cardi√≥logo")
            st.markdown("- üèÉ‚Äç‚ôÇÔ∏è Aumentar la actividad f√≠sica")
            st.markdown("- ü•ó Mejorar la dieta")
            st.markdown("- üö≠ Evitar el tabaco y alcohol")
        else:
            st.success(f"‚úÖ **RIESGO CARDIOVASCULAR BAJO** - Probabilidad promedio: {avg_prob:.1%}")
            st.markdown("**Recomendaciones:**")
            st.markdown("- üíö Mantener h√°bitos saludables")
            st.markdown("- üèÉ‚Äç‚ôÇÔ∏è Continuar con actividad f√≠sica regular")
            st.markdown("- üçé Mantener una dieta balanceada")
            st.markdown("- üìÖ Revisiones m√©dicas peri√≥dicas")

def comparison_page(df):
    st.header("üìà Comparaci√≥n Exhaustiva de Modelos")
    
    if 'models' not in st.session_state:
        st.warning("‚ö†Ô∏è Primero debes entrenar los modelos en la p√°gina de 'Entrenamiento de Modelos'.")
        return
    
    # M√©tricas generales
    st.subheader("üìä Tabla Comparativa de M√©tricas")
    
    metrics_df = pd.DataFrame(st.session_state['metrics']).T
    metrics_df = metrics_df.round(4)
    metrics_df = metrics_df.sort_values('Accuracy', ascending=False)
    
    # Colorear la tabla
    def color_metrics(val):
        if val >= 0.9:
            return 'background-color: #d4edda'
        elif val >= 0.8:
            return 'background-color: #fff3cd'
        else:
            return 'background-color: #f8d7da'
    
    styled_df = metrics_df.style.applymap(color_metrics)
    st.dataframe(styled_df, use_container_width=True)
    
    # Gr√°fico de barras comparativo
    st.subheader("üìä Comparaci√≥n Visual de M√©tricas")
    
    metric_to_plot = st.selectbox(
        "Selecciona la m√©trica a visualizar:",
        ['Accuracy', 'Precision', 'Recall', 'F1_Score']
    )
    
    fig_comparison = px.bar(
        x=metrics_df.index,
        y=metrics_df[metric_to_plot],
        title=f"Comparaci√≥n de {metric_to_plot} entre Modelos",
        color=metrics_df[metric_to_plot],
        color_continuous_scale='Viridis',
        text=metrics_df[metric_to_plot].round(3)
    )
    fig_comparison.update_traces(textposition='outside')
    fig_comparison.update_layout(
        xaxis_title="Modelos",
        yaxis_title=metric_to_plot,
        showlegend=False
    )
    st.plotly_chart(fig_comparison, use_container_width=True)
    
    # Matriz de confusi√≥n para cada modelo
    st.subheader("üîç Matrices de Confusi√≥n")
    
    model_to_analyze = st.selectbox("Selecciona un modelo para an√°lisis detallado:", list(st.session_state['models'].keys()))
    
    if model_to_analyze:
        model = st.session_state['models'][model_to_analyze]
        y_pred = model.predict(st.session_state['X_test'])
        
        # Matriz de confusi√≥n
        cm = confusion_matrix(st.session_state['y_test'], y_pred)
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig_cm = px.imshow(
                cm,
                text_auto=True,
                aspect="auto",
                title=f"Matriz de Confusi√≥n - {model_to_analyze}",
                labels=dict(x="Predicho", y="Real"),
                x=['Sin Riesgo', 'Con Riesgo'],
                y=['Sin Riesgo', 'Con Riesgo'],
                color_continuous_scale='Blues'
            )
            st.plotly_chart(fig_cm, use_container_width=True)
        
        with col2:
            # Reporte de clasificaci√≥n
            report = classification_report(st.session_state['y_test'], y_pred, output_dict=True)
            
            st.markdown(f"#### üìã Reporte Detallado - {model_to_analyze}")
            st.markdown(f"**Precisi√≥n Global:** {report['accuracy']:.3f}")
            st.markdown(f"**Precisi√≥n Clase 0:** {report['0']['precision']:.3f}")
            st.markdown(f"**Precisi√≥n Clase 1:** {report['1']['precision']:.3f}")
            st.markdown(f"**Recall Clase 0:** {report['0']['recall']:.3f}")
            st.markdown(f"**Recall Clase 1:** {report['1']['recall']:.3f}")
            st.markdown(f"**F1-Score Macro:** {report['macro avg']['f1-score']:.3f}")
    
    # Curvas ROC
    st.subheader("üìà Curvas ROC/AUC")
    
    fig_roc = go.Figure()
    
    for model_name, model in st.session_state['models'].items():
        if hasattr(model, 'predict_proba'):
            y_prob = model.predict_proba(st.session_state['X_test'])[:, 1]
        else:
            # Para SVM
            y_prob = model.decision_function(st.session_state['X_test'])
        
        fpr, tpr, _ = roc_curve(st.session_state['y_test'], y_prob)
        auc_score = auc(fpr, tpr)
        
        fig_roc.add_trace(go.Scatter(
            x=fpr,
            y=tpr,
            name=f'{model_name} (AUC = {auc_score:.3f})',
            mode='lines'
        ))
    
    # L√≠nea diagonal
    fig_roc.add_trace(go.Scatter(
        x=[0, 1],
        y=[0, 1],
        mode='lines',
        line=dict(dash='dash', color='gray'),
        name='L√≠nea Base (AUC = 0.5)',
        showlegend=False
    ))
    
    fig_roc.update_layout(
        title='Curvas ROC - Comparaci√≥n de Todos los Modelos',
        xaxis_title='Tasa de Falsos Positivos',
        yaxis_title='Tasa de Verdaderos Positivos',
        width=800,
        height=600
    )
    
    st.plotly_chart(fig_roc, use_container_width=True)
    
    # Ranking final
    st.subheader("üèÜ Ranking Final de Modelos")
    
    ranking_df = metrics_df.copy()
    ranking_df['Ranking'] = range(1, len(ranking_df) + 1)
    ranking_df = ranking_df[['Ranking', 'Accuracy', 'Precision', 'Recall', 'F1_Score']]
    
    st.dataframe(ranking_df, use_container_width=True)
    
    # Recomendaci√≥n final
    best_model = ranking_df.index[0]
    st.success(f"üéØ **Modelo Recomendado:** {best_model}")
    st.info(f"üìä Este modelo obtuvo la mejor precisi√≥n general: {ranking_df.loc[best_model, 'Accuracy']:.1%}")

if __name__ == "__main__":
    main()
